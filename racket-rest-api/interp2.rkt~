#lang racket


(require "subst-cache.rkt" "parser.rkt")


(define prog1
  `(bind bacon (bind y 42 (fun x (+ x y)))
         (bind matthias (bind y 68 (fun z (call z y)))
               (call matthias bacon))))


(define prog2
  `(bind !
         (fun x
              (if0 x
                   1
                   (* x (call ! (+ x -1)))))
         (call ! 10)))

(define prog3
  `(bind x 3
         (bind f (fun y (+ x y))
               (bind x 5
                     (call f 4)))))


(module+ test
  (require rackunit)
    (check-exn (lambda (e) (exn:fail? e))
             (λ () (interp prog1)))
  (check-equal? (interp prog2) 3628800)
  (check-equal? (interp prog3) 9))


#; {Values = Integer || `(function-value ,Var ,Expr ,Env)}
(define (value? x)
  (or (integer? x)
      (and (cons? x) (equal? (first x) 'function-value))))

; S-expression -> Value
(define (interp lang [sc empty])
  (match lang
    [(? number?) lang]
    [(? symbol?) (if (defined? lang sc) (lookup lang sc) (error (format "undeclared variable ~a" lang)))]
    [`(+ ,l ,r) (+ (interp l sc) (interp r sc))]
    [`(* ,l ,r) (* (interp l sc) (interp r sc))]
    [`(bind ,l ,r ,b) #;(interp b (add l (interp r env) env))
                      (interp b (add-rec l (λ (env) (interp r env)) sc))]
    [`(fun ,p ,b) `(function-value ,p ,b)]
    [`(call ,f ,a) (fun-apply (interp f sc) (interp a sc) sc)]
    [`(if0 ,c ,t ,e)
     (define test-value (interp c sc))
     (if (and (number? test-value) (= test-value 0))
         (interp t sc)
         (interp e sc))]))

; Value Value -> Value 
(define (fun-apply function-representation argument-value sc)
  (match function-representation
    [`(function-value ,fpara ,fbody)
     (interp fbody (add fpara argument-value sc))]))


; (displayln (interp1 (command-line #:args (str) str)))




